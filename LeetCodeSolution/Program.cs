namespace LeetCodeSolution
{
    using System;

    class Program
    {
        // 24/04/2025
        public static void Main()
        {
            Console.WriteLine(Solution([892, 150, 432, 586, 344, 107, 51, 406, 616, 921, 164, 42, 136, 681, 456, 853, 801, 478, 275, 729, 396, 727, 777, 439, 721, 308, 697, 870, 98, 149, 848, 875, 817, 188, 796, 807, 989, 742, 185, 701, 564, 88, 438, 889, 985, 894, 158, 246, 382, 496, 734, 767, 402, 634, 511, 273, 952, 554, 834, 648, 658, 70, 516, 713, 756, 976, 323, 489, 360, 40, 880, 156, 224, 745, 316, 919, 476, 829, 353, 319, 152, 699, 505, 501, 292, 474, 145, 595, 414, 803, 992, 307, 694, 375, 165, 510, 313, 688, 286, 962, 373, 589, 779, 208, 993, 545, 461, 444, 530, 1, 495, 517, 447, 881, 234, 679, 622, 391, 97, 293, 374, 595, 710, 372, 299, 351, 600, 3, 532, 730, 577, 109, 341, 211, 573, 724, 220, 633, 314, 502, 380, 68, 243, 536, 683, 948, 838, 759, 469, 112, 857, 938, 305, 707, 135, 209, 617, 695, 566, 821, 604, 900, 823, 551, 757, 568, 31, 656, 799, 884, 671, 468, 827, 54, 512, 363, 984, 809, 868, 926, 449, 652, 266, 581, 130, 333, 939, 272, 698, 723, 9, 298, 95, 787, 154, 296, 874, 726, 778, 450, 980, 241, 64, 621, 935, 191, 674, 752, 189, 386, 557, 127, 290, 610, 583, 485, 909, 888, 487, 871, 102, 179, 521, 207, 21, 324, 524, 553, 465, 515, 235, 852, 388, 257, 959, 813, 8, 981, 397, 194, 123, 355, 932, 854, 170, 790, 718, 247, 87, 608, 626, 482, 43, 534, 481, 736, 619, 649, 345, 797, 887, 865, 896, 903, 798, 371, 611, 861, 421, 268, 678, 596, 458, 175, 368, 696, 670, 659, 601, 613, 615, 24, 352, 552, 173, 255, 548, 692, 673, 990, 930, 647, 846, 761, 250, 715, 399, 431, 866, 977, 804, 169, 442, 842, 518, 101, 547, 561, 728, 849, 644, 20, 555, 828, 193, 749, 978, 704, 116, 494, 359, 789, 882, 354, 183, 73, 654, 638, 446, 811, 62, 549, 417, 151, 584, 196, 563, 403, 602, 539, 479, 528, 737, 190, 66, 229, 315, 430, 115, 750, 236, 384, 56, 904, 89, 277, 162, 215, 23, 499, 579, 282, 30, 972, 531, 332, 415, 84, 287, 74, 118, 167, 57, 805, 788, 238, 899, 144, 708, 700, 522, 203, 603, 12, 409, 731, 33, 470, 182, 221, 147, 955, 81, 775, 755, 330, 944, 587, 329, 94, 379, 642, 400, 174, 119, 933, 792, 131, 625, 945, 498, 924, 732, 440, 311, 739, 370, 284, 780, 890, 484, 843, 289, 331, 662, 968, 418, 69, 702, 378, 488, 915, 422, 722, 766, 245, 814, 879, 826, 719, 527, 987, 986, 677, 593, 113, 808, 47, 612, 574, 490, 389, 570, 392, 61, 192, 641, 947, 218, 168, 441, 466, 137, 295, 765, 340, 653, 643, 735, 680, 851, 26, 10, 486, 52, 263, 237, 288, 125, 423, 800, 685, 126, 824, 491, 454, 675, 214, 44, 667, 966, 897, 605, 231, 819, 815, 729, 67, 184, 937, 328, 646, 901, 559, 500, 725, 862, 917, 358, 106, 269, 381, 541, 2, 912, 508, 206, 93, 443, 210, 760, 768, 472, 764, 706, 159, 754, 877, 140, 181, 936, 651, 831, 830, 302, 562, 614, 467, 960, 187, 416, 858, 910, 213, 405, 242, 256, 37, 609, 580, 893, 883, 251, 71, 261, 867, 278, 274, 550, 27, 969, 5, 460, 543, 166, 623, 262, 712, 746, 239, 318, 684, 309, 38, 791, 45, 425, 637, 663, 618, 280, 300, 682, 410, 477, 28, 594, 860, 885, 773, 338, 873, 774, 687, 387, 783, 802, 445, 509, 907, 217, 591, 219, 297, 748, 946, 337, 114, 451, 590, 825, 639, 686, 869, 121, 950, 157, 100, 588, 4, 506, 55, 925, 841, 34, 342, 178, 201, 146, 357, 569, 949, 63, 153, 29, 529, 793, 471, 504, 497, 294, 283, 836, 212, 538, 795, 507, 920, 533, 79, 76, 139, 291, 598, 285, 973, 452, 983, 142, 429, 940, 781, 839, 82, 186, 404, 411, 204, 514, 105, 762, 537, 90, 240, 840, 816, 635, 565, 575, 665, 463, 86, 786, 740, 703, 222, 994, 223, 655, 886, 666, 232, 258, 914, 92, 435, 705, 709, 556, 571, 905, 320, 260, 433, 480, 953, 954, 835, 872, 558, 523, 180, 32, 908, 542, 77, 334, 199, 922, 434, 492, 991, 455, 249, 356, 271, 419, 230, 228, 225, 110, 367, 279, 226, 578, 335, 772, 751, 394, 660, 129, 426, 133, 483, 898, 627, 970, 806, 822, 928, 820, 428, 53, 943, 11, 281, 49, 738, 771, 620, 640, 876, 585, 958, 664, 301, 401, 606, 810, 657, 78, 770, 117, 971, 393, 99, 252, 525, 693, 845, 346, 916, 178, 995, 599, 963, 832, 248, 59, 988, 711, 741, 160, 503, 16, 929, 385, 847, 495, 788, 582, 80, 592, 306, 975, 148, 833, 567, 377, 253, 535, 631, 65, 103, 636, 716, 7, 171, 717, 785, 965, 645, 689, 83, 177, 369, 17, 276, 956, 390, 365, 132, 957, 464, 141, 91, 264, 15, 769, 942, 413, 863, 233, 412, 321, 172, 339, 462, 913, 979, 343, 96, 856, 50, 911, 475, 747, 395, 176, 254, 259, 624, 546, 520, 197, 407, 327, 85, 420, 961, 676, 493, 850, 902, 964, 350, 974, 967, 744, 784, 837, 669, 216, 348, 923, 864, 364, 672, 859, 227, 41, 46, 124, 39, 304, 891, 597, 895, 200, 436, 104, 13, 198, 19, 36, 244, 513, 629, 267, 270, 818, 25, 108, 58, 733, 758, 161, 544, 48, 906, 632, 6, 312, 812, 362, 122, 325, 763, 844, 459, 163, 195, 120, 303, 473, 540, 668, 628, 743, 519, 776, 782, 607, 128, 927, 376, 326, 336, 427, 408, 951, 75, 349, 982, 265, 448, 931, 918, 202, 18, 22, 794, 453, 690, 753, 134, 661, 572, 14, 457, 317, 560, 322, 691, 111, 205, 310, 576, 138, 35, 424, 72, 714, 720, 941, 398, 60, 878, 855, 630, 526, 934, 347, 366, 143, 650, 155, 361, 437, 383]));
        }
        public static int Solution(int[] nums)
        {
            Dictionary<int, int> freq = new Dictionary<int, int>();
            int count = 0;
            int left = 0;
            int totalDistinct = new HashSet<int>(nums).Count;
            for (int i = 0; i < nums.Length; i++)
            {
                if (!freq.ContainsKey(nums[i]))
                {
                    freq[nums[i]] = 0;
                }
                freq[nums[i]]++;
                while (freq.Count == totalDistinct)
                {
                    count += nums.Length - i;
                    freq[nums[left]]--;
                    if (freq[nums[left]] == 0)
                    {
                        freq.Remove(nums[left]);
                    }
                    left++;
                }
            }
            return count;
        }
    }
}

